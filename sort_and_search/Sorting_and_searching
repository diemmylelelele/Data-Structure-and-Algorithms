package com.gradescope.cs201;
import com.gradescope.cs201.UnsortedArrayBlackbox;
import com.gradescope.cs201.SortedArrayBlackbox;
import java.util.Random;

public class Sorting_and_searching_hw3 {
    public Sorting_and_searching_hw3() {

    }
    // Get Index of an Sorted Array
    public int get_index(SortedArrayBlackbox sorted_arr_bb, int x) {
        int left= 0;
        int right = sorted_arr_bb.get_length() - 1;    
        while (left <= right) {
            int mid = left + (right - left) / 2;
            int comparison = sorted_arr_bb.compare(mid, x);    
            if (comparison == 0) {
                return mid;
            } else if (comparison ==1) {
                left = mid + 1;
            } else if(comparison==-1) {
                right = mid - 1;
            }
        }    
        return -1;
    }
    // Get Median Index of an Unsorted Array  
    public int get_median_index(UnsortedArrayBlackbox unsorted_arr_bb) {
        int length = unsorted_arr_bb.get_length();
        int[] indices = new int[length];
        for (int i = 0; i < length; i++) {
            indices[i] = i;
        }
        int left = 0;
        int right = length - 1;
        int medianIndex = length / 2;
        while (left <= right) {
            int pivotIndex = partition(unsorted_arr_bb, indices, left, right);
            if (pivotIndex == medianIndex) {
                return indices[pivotIndex];
            } else if (pivotIndex < medianIndex) {
                left = pivotIndex + 1;
            } else {
                right = pivotIndex - 1;
            }
        }
        return -1;
    }
    private int partition(UnsortedArrayBlackbox unsorted_arr_bb, int[] indices, int left, int right) {
        int randomIndex = getRandomIndex(left, right);
        swap(indices, randomIndex, right);
        int pivotIndex = left;
        for (int i = left; i < right; i++) {
            if (unsorted_arr_bb.compare(indices[i], indices[right]) < 0) {
                swap(indices, i, pivotIndex);
                pivotIndex++;
            }
        }
        swap(indices, pivotIndex, right);
        return pivotIndex;
    }
    private int getRandomIndex(int left, int right) {
        Random rand = new Random();
        return rand.nextInt(right - left + 1) + left;
    }

    private void swap(int[] indices, int i, int j) {
        int temp = indices[i];
        indices[i] = indices[j];
        indices[j] = temp;
    }          
    public static void main(String[] args) {
        Sorting_and_searching_hw3 sort_and_search = new Sorting_and_searching_hw3();

        //Test cases for get_median_index
        // int[] unsorted_arr_1 = {1, 49, 3, 54, 29};
        // UnsortedArrayBlackbox unsorted_arr_bb_1 = new UnsortedArrayBlackbox(unsorted_arr_1);
        // System.out.println(sort_and_search.get_median_index(unsorted_arr_bb_1) + " must be 4");
        // System.out.println(unsorted_arr_bb_1.get_comparison_num() + " must be <= 9");

        int[] unsorted_arr_2 = {1, 49, 29, 54, 3, 11, 20, 35, 40, 9, 67};
        UnsortedArrayBlackbox unsorted_arr_bb_2 = new UnsortedArrayBlackbox(unsorted_arr_2);
        System.out.println(sort_and_search.get_median_index(unsorted_arr_bb_2) + " must be 2");
        System.out.println(unsorted_arr_bb_2.get_comparison_num() + " must be <= 45");

        //Test cases for get_index
        // int[] sorted_arr_1 = {1, 3, 9, 11, 20, 29, 35, 40, 49, 54, 67, 70};
        // SortedArrayBlackbox sorted_arr_bb_1 = new SortedArrayBlackbox(sorted_arr_1);
        // System.out.println(sort_and_search.get_index(sorted_arr_bb_1, 67) + " must be 10");
        // System.out.println(sorted_arr_bb_1.get_comparison_num() + " must be <= 4");

        // int[] sorted_arr_2 = {1, 3, 9, 11, 20, 29, 35, 40, 49, 54, 67, 70};
        // SortedArrayBlackbox sorted_arr_bb_2 = new SortedArrayBlackbox(sorted_arr_2);
        // System.out.println(sort_and_search.get_index(sorted_arr_bb_2, 35) + " must be 6");
        // System.out.println(sorted_arr_bb_2.get_comparison_num() + " must be <= 4");

        // int[] sorted_arr_3 = {1, 3, 9, 11, 20, 29, 35, 40, 49, 54, 67, 70};
        // SortedArrayBlackbox sorted_arr_bb_3 = new SortedArrayBlackbox(sorted_arr_3);
        // System.out.println(sort_and_search.get_index(sorted_arr_bb_3, 12) + " must be -1");
        // System.out.println(sorted_arr_bb_3.get_comparison_num() + " must be <= 4");
    }
}

